// Script final para testar relat√≥rios via interface correta
// Execute este script no console do navegador (F12) ap√≥s abrir http://localhost:8080

console.log('üöÄ INICIANDO TESTE FINAL DOS RELAT√ìRIOS');

// Fun√ß√£o para aguardar e simular submit de formul√°rio
function submitForm(formId, testName) {
    return new Promise((resolve) => {
        const form = document.getElementById(formId);
        if (form) {
            console.log(`üìã Encontrado formul√°rio: ${formId}`);
            
            // Simular submit do formul√°rio
            const event = new Event('submit', { bubbles: true, cancelable: true });
            form.dispatchEvent(event);
            console.log(`‚úÖ Submit enviado para ${testName}`);
            
            // Aguardar processamento
            setTimeout(() => {
                resolve(true);
            }, 3000);
        } else {
            console.error(`‚ùå Formul√°rio ${formId} n√£o encontrado`);
            resolve(false);
        }
    });
}

// Fun√ß√£o principal de teste
async function testarRelatoriosInterface() {
    try {
        console.log('1. Verificando estado da p√°gina...');
        
        // Verificar se estamos na p√°gina correta
        if (!document.getElementById('relatoriosSection')) {
            console.error('‚ùå Se√ß√£o de relat√≥rios n√£o encontrada. Certifique-se de estar na p√°gina correta.');
            return;
        }
        
        console.log('2. Verificando dados carregados...');
        
        // Aguardar dados serem carregados
        let tentativas = 0;
        while ((!window.caminhoes || !window.abastecimentos) && tentativas < 30) {
            await new Promise(resolve => setTimeout(resolve, 500));
            tentativas++;
        }
        
        if (!window.caminhoes || !window.abastecimentos) {
            console.error('‚ùå Dados n√£o carregados ap√≥s 15 segundos');
            console.log('window.caminhoes:', window.caminhoes);
            console.log('window.abastecimentos:', window.abastecimentos);
            return;
        }
        
        console.log('‚úÖ Dados carregados:');
        console.log(`- Caminh√µes: ${window.caminhoes.length}`);
        console.log(`- Abastecimentos: ${window.abastecimentos.length}`);
        
        console.log('3. Navegando para se√ß√£o de relat√≥rios...');
        
        // Mostrar se√ß√£o de relat√≥rios
        const relatoriosSection = document.getElementById('relatoriosSection');
        if (relatoriosSection) {
            // Esconder outras se√ß√µes
            document.querySelectorAll('[id$="Section"]').forEach(section => {
                section.style.display = 'none';
            });
            relatoriosSection.style.display = 'block';
            console.log('‚úÖ Se√ß√£o de relat√≥rios ativada');
        }
        
        // Aguardar um pouco para renderiza√ß√£o
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        console.log('4. Preenchendo formul√°rio de consumo...');
        
        // Preencher formul√°rio de consumo
        const dataInicio = document.getElementById('dataInicio');
        const dataFim = document.getElementById('dataFim');
        const caminhaoSelect = document.getElementById('caminhaoSelect');
        
        if (dataInicio && dataFim && caminhaoSelect) {
            // Definir per√≠odo dos √∫ltimos 30 dias
            const hoje = new Date();
            const trintaDiasAtras = new Date();
            trintaDiasAtras.setDate(hoje.getDate() - 30);
            
            dataInicio.value = trintaDiasAtras.toISOString().split('T')[0];
            dataFim.value = hoje.toISOString().split('T')[0];
            caminhaoSelect.value = 'todos';
            
            console.log('‚úÖ Formul√°rio de consumo preenchido');
            console.log(`  Data in√≠cio: ${dataInicio.value}`);
            console.log(`  Data fim: ${dataFim.value}`);
            console.log(`  Caminh√£o: ${caminhaoSelect.value}`);
        } else {
            console.error('‚ùå Elementos do formul√°rio de consumo n√£o encontrados');
        }
        
        console.log('5. Testando relat√≥rio de consumo...');
        
        // Testar relat√≥rio de consumo
        const successConsumo = await submitForm('relatorioConsumoForm', 'Relat√≥rio de Consumo');
        
        if (successConsumo) {
            // Verificar se o relat√≥rio foi gerado
            const resultados = document.getElementById('relatorioResultados');
            if (resultados && resultados.innerHTML.includes('Relat√≥rio de Consumo')) {
                console.log('‚úÖ Relat√≥rio de consumo gerado com sucesso!');
                
                // Verificar elementos espec√≠ficos
                const tabelas = resultados.querySelectorAll('table');
                const graficos = resultados.querySelectorAll('canvas');
                
                console.log(`üìä Tabelas encontradas: ${tabelas.length}`);
                console.log(`üìà Gr√°ficos encontrados: ${graficos.length}`);
                
                if (tabelas.length > 0) {
                    console.log('‚úÖ Dados tabulares presentes');
                }
                
                if (graficos.length > 0) {
                    console.log('‚úÖ Elementos gr√°ficos presentes');
                }
                
            } else {
                console.log('‚ö†Ô∏è Relat√≥rio de consumo pode n√£o ter sido gerado corretamente');
                console.log('Conte√∫do atual:', resultados ? resultados.innerHTML.substring(0, 300) : 'Elemento n√£o encontrado');
            }
        }
        
        console.log('6. Preenchendo formul√°rio de custos...');
        
        // Preencher formul√°rio de custos
        const mesInicio = document.getElementById('mesInicio');
        const mesFim = document.getElementById('mesFim');
        const tipoAgrupamento = document.getElementById('tipoAgrupamento');
        
        if (mesInicio && mesFim && tipoAgrupamento) {
            const agora = new Date();
            const anoAtual = agora.getFullYear();
            const mesAtual = agora.getMonth() + 1;
            
            mesInicio.value = `${anoAtual}-${mesAtual.toString().padStart(2, '0')}`;
            mesFim.value = `${anoAtual}-${mesAtual.toString().padStart(2, '0')}`;
            tipoAgrupamento.value = 'caminhao';
            
            console.log('‚úÖ Formul√°rio de custos preenchido');
            console.log(`  M√™s in√≠cio: ${mesInicio.value}`);
            console.log(`  M√™s fim: ${mesFim.value}`);
            console.log(`  Agrupamento: ${tipoAgrupamento.value}`);
        } else {
            console.error('‚ùå Elementos do formul√°rio de custos n√£o encontrados');
        }
        
        console.log('7. Testando relat√≥rio de custos...');
        
        // Testar relat√≥rio de custos
        const successCustos = await submitForm('relatorioCustosForm', 'Relat√≥rio de Custos');
        
        if (successCustos) {
            // Verificar se o relat√≥rio foi gerado
            const resultados = document.getElementById('relatorioResultados');
            if (resultados && resultados.innerHTML.includes('Relat√≥rio de Custos')) {
                console.log('‚úÖ Relat√≥rio de custos gerado com sucesso!');
                
                // Verificar elementos espec√≠ficos
                const tabelas = resultados.querySelectorAll('table');
                const graficos = resultados.querySelectorAll('canvas');
                const cards = resultados.querySelectorAll('.card');
                
                console.log(`üìä Tabelas encontradas: ${tabelas.length}`);
                console.log(`üìà Gr√°ficos encontrados: ${graficos.length}`);
                console.log(`üìã Cards de resumo encontrados: ${cards.length}`);
                
            } else {
                console.log('‚ö†Ô∏è Relat√≥rio de custos pode n√£o ter sido gerado corretamente');
                console.log('Conte√∫do atual:', resultados ? resultados.innerHTML.substring(0, 300) : 'Elemento n√£o encontrado');
            }
        }
        
        console.log('8. Testando fun√ß√µes de exporta√ß√£o...');
        
        // Verificar bot√µes de exporta√ß√£o
        const btnExcel = document.getElementById('exportarExcel');
        const btnPdf = document.getElementById('exportarPdf');
        
        console.log(`üìÑ Bot√£o Excel: ${btnExcel ? '‚úÖ' : '‚ùå'}`);
        console.log(`üìÑ Bot√£o PDF: ${btnPdf ? '‚úÖ' : '‚ùå'}`);
        
        if (btnExcel) {
            console.log('‚ÑπÔ∏è Exporta√ß√£o Excel dispon√≠vel (clique manual necess√°rio)');
        }
        
        if (btnPdf) {
            console.log('‚ÑπÔ∏è Exporta√ß√£o PDF dispon√≠vel (clique manual necess√°rio)');
        }
        
        console.log('üéâ TESTE CONCLU√çDO!');
        
        // Resumo final
        console.log('\nüìã RESUMO FINAL:');
        console.log(`‚úÖ Dados carregados: ${window.caminhoes && window.abastecimentos ? 'SIM' : 'N√ÉO'}`);
        console.log(`‚úÖ Se√ß√£o de relat√≥rios: ${document.getElementById('relatoriosSection') ? 'SIM' : 'N√ÉO'}`);
        console.log(`‚úÖ Formul√°rio de consumo: ${document.getElementById('relatorioConsumoForm') ? 'SIM' : 'N√ÉO'}`);
        console.log(`‚úÖ Formul√°rio de custos: ${document.getElementById('relatorioCustosForm') ? 'SIM' : 'N√ÉO'}`);
        console.log(`‚úÖ √Årea de resultados: ${document.getElementById('relatorioResultados') ? 'SIM' : 'N√ÉO'}`);
        console.log(`‚úÖ Bot√µes de exporta√ß√£o: ${document.getElementById('exportarExcel') && document.getElementById('exportarPdf') ? 'SIM' : 'N√ÉO'}`);
        
        const resultadosFinais = document.getElementById('relatorioResultados');
        if (resultadosFinais && resultadosFinais.innerHTML.trim()) {
            console.log('‚úÖ RELAT√ìRIOS FUNCIONANDO CORRETAMENTE! üéâ');
        } else {
            console.log('‚ö†Ô∏è Relat√≥rios podem precisar de ajustes adicionais');
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
        console.error('Stack trace:', error.stack);
    }
}

// Executar o teste automaticamente
console.log('Aguarde 2 segundos para iniciar o teste...');
setTimeout(testarRelatoriosInterface, 2000);
