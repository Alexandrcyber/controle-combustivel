/**
 * üîß VALIDA√á√ÉO FINAL - Corre√ß√£o "totalKm is not defined"
 * 
 * Este script valida se todas as corre√ß√µes aplicadas ao arquivo relatorios.js
 * realmente resolveram o problema de vari√°veis indefinidas na gera√ß√£o de PDF.
 */

// Simular ambiente de teste
const fs = require('fs');
const path = require('path');

console.log('üîç INICIANDO VALIDA√á√ÉO FINAL - Corre√ß√£o totalKm is not defined\n');

// Caminho do arquivo principal
const arquivoRelatorios = '/home/aleandre-liberato/Documentos/programacao/projetos/controle_de_combustivel/frontend/src/js/relatorios.js';

try {
    console.log('üìÇ Lendo arquivo relatorios.js...');
    const conteudo = fs.readFileSync(arquivoRelatorios, 'utf8');
    
    console.log('‚úÖ Arquivo carregado com sucesso!\n');
    
    // TESTE 1: Verificar se as corre√ß√µes das linhas cr√≠ticas est√£o aplicadas
    console.log('üß™ TESTE 1: Verificando corre√ß√µes espec√≠ficas...');
    
    const testesCorrecoes = [
        {
            teste: 'Linha 1342 - totalKm em relat√≥rio de caminh√£o',
            busca: 'formatarNumero(caminhao.totalKm, 1)',
            erro: 'caminhao.formatarNumero(totalKm, 1)'
        },
        {
            teste: 'Linha 1438 - totalKm em resumo',
            busca: 'formatarNumero(caminhao.totalKm, 0)',
            erro: 'caminhao.formatarNumero(totalKm, 0)'
        },
        {
            teste: 'Linha 843-844 - formatarMoeda com objetos',
            busca: 'formatarMoeda(caminhao.total',
            erro: 'caminhao.formatarMoeda(total'
        }
    ];
    
    let todosTestes = true;
    
    testesCorrecoes.forEach((teste, index) => {
        const temCorrecao = conteudo.includes(teste.busca);
        const temErro = conteudo.includes(teste.erro);
        
        if (temCorrecao && !temErro) {
            console.log(`   ‚úÖ ${teste.teste} - CORRETO`);
        } else if (temErro) {
            console.log(`   ‚ùå ${teste.teste} - ERRO AINDA PRESENTE`);
            todosTestes = false;
        } else {
            console.log(`   ‚ö†Ô∏è  ${teste.teste} - PADR√ÉO N√ÉO ENCONTRADO`);
        }
    });
    
    // TESTE 2: Verificar se n√£o h√° mais refer√™ncias diretas a totalKm sem objeto
    console.log('\nüß™ TESTE 2: Procurando refer√™ncias incorretas a totalKm...');
    
    const linhas = conteudo.split('\n');
    let referencasIncorretas = [];
    
    linhas.forEach((linha, index) => {
        // Procurar por totalKm n√£o precedido por objeto (caminhao., veiculo., etc.)
        if (linha.includes('totalKm') && !linha.includes('//')) {
            const regex = /(?<![\w\.])totalKm(?!\s*:)/g;
            const matches = linha.match(regex);
            
            if (matches) {
                // Verificar se n√£o √© uma defini√ß√£o de propriedade
                if (!linha.includes('totalKm:') && !linha.includes('.totalKm')) {
                    referencasIncorretas.push({
                        linha: index + 1,
                        conteudo: linha.trim()
                    });
                }
            }
        }
    });
    
    if (referencasIncorretas.length === 0) {
        console.log('   ‚úÖ Nenhuma refer√™ncia incorreta a totalKm encontrada');
    } else {
        console.log(`   ‚ùå Encontradas ${referencasIncorretas.length} refer√™ncias incorretas:`);
        referencasIncorretas.forEach(ref => {
            console.log(`      Linha ${ref.linha}: ${ref.conteudo}`);
        });
        todosTestes = false;
    }
    
    // TESTE 3: Verificar se fun√ß√µes auxiliares existem
    console.log('\nüß™ TESTE 3: Verificando fun√ß√µes auxiliares...');
    
    const funcoesNecessarias = [
        'formatarNumero',
        'formatarMoeda',
        'criarAnalisePrecos',
        'criarAnaliseTemporalData',
        'aplicarEstilizacaoDashboard'
    ];
    
    funcoesNecessarias.forEach(funcao => {
        const regex = new RegExp(`function\\s+${funcao}\\s*\\(|const\\s+${funcao}\\s*=|let\\s+${funcao}\\s*=`, 'g');
        const temFuncao = regex.test(conteudo);
        
        if (temFuncao) {
            console.log(`   ‚úÖ Fun√ß√£o ${funcao} - ENCONTRADA`);
        } else {
            console.log(`   ‚ö†Ô∏è  Fun√ß√£o ${funcao} - N√ÉO ENCONTRADA (pode estar em outro arquivo)`);
        }
    });
    
    // TESTE 4: Verificar sintaxe b√°sica
    console.log('\nüß™ TESTE 4: Verifica√ß√£o de sintaxe b√°sica...');
    
    try {
        // Simular parsing b√°sico - procurar por problemas √≥bvios
        const problemasSintaxe = [];
        
        // Verificar chaves desbalanceadas
        const chaves = (conteudo.match(/\{/g) || []).length;
        const fechamentos = (conteudo.match(/\}/g) || []).length;
        
        if (chaves !== fechamentos) {
            problemasSintaxe.push(`Chaves desbalanceadas: ${chaves} aberturas vs ${fechamentos} fechamentos`);
        }
        
        // Verificar par√™nteses
        const parenteses = (conteudo.match(/\(/g) || []).length;
        const fechaParenteses = (conteudo.match(/\)/g) || []).length;
        
        if (parenteses !== fechaParenteses) {
            problemasSintaxe.push(`Par√™nteses desbalanceados: ${parenteses} aberturas vs ${fechaParenteses} fechamentos`);
        }
        
        if (problemasSintaxe.length === 0) {
            console.log('   ‚úÖ Sintaxe b√°sica OK');
        } else {
            console.log('   ‚ùå Problemas de sintaxe encontrados:');
            problemasSintaxe.forEach(problema => {
                console.log(`      ${problema}`);
            });
            todosTestes = false;
        }
        
    } catch (error) {
        console.log(`   ‚ùå Erro na verifica√ß√£o de sintaxe: ${error.message}`);
        todosTestes = false;
    }
    
    // RESULTADO FINAL
    console.log('\n' + '='.repeat(60));
    if (todosTestes) {
        console.log('üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!');
        console.log('‚úÖ Todas as corre√ß√µes do erro "totalKm is not defined" foram aplicadas corretamente');
        console.log('‚úÖ O arquivo est√° pronto para uso em produ√ß√£o');
        console.log('\nüìã PR√ìXIMOS PASSOS:');
        console.log('   1. Teste a gera√ß√£o de PDF no sistema real');
        console.log('   2. Verifique se n√£o h√° outros erros de runtime');
        console.log('   3. Monitore o desempenho ap√≥s as corre√ß√µes');
    } else {
        console.log('‚ö†Ô∏è  VALIDA√á√ÉO INCOMPLETA');
        console.log('‚ùå Alguns problemas ainda precisam ser resolvidos');
        console.log('üìã Revise os erros indicados acima antes de usar em produ√ß√£o');
    }
    console.log('='.repeat(60));

} catch (error) {
    console.error('‚ùå Erro ao validar arquivo:', error.message);
}
