const { pool, migrationApplied, registerMigration, addColumnIfNotExists } = require('./database');

// Array com todas as migra√ß√µes do sistema
const migrations = [
    {
        version: '1.0.0',
        description: 'Cria√ß√£o das tabelas base (caminhoes e abastecimentos)',
        up: async () => {
            // Esta migra√ß√£o j√° est√° implementada no database.js
            // Mantida aqui apenas para refer√™ncia
        }
    },
    {
        version: '1.1.0', 
        description: 'Adi√ß√£o de colunas status e observa√ß√µes, triggers de updated_at',
        up: async () => {
            // Esta migra√ß√£o j√° est√° implementada no database.js
            // Mantida aqui apenas para refer√™ncia
        }
    },
    {
        version: '1.2.0',
        description: 'Adi√ß√£o de campos para controle de manuten√ß√£o',
        up: async () => {
            console.log('üîÑ Aplicando migra√ß√£o 1.2.0 - Campos de manuten√ß√£o...');
            
            // Adicionar campos de manuten√ß√£o aos caminh√µes
            await addColumnIfNotExists('caminhoes', 'ultima_manutencao', 'DATE');
            await addColumnIfNotExists('caminhoes', 'proxima_manutencao', 'DATE');
            await addColumnIfNotExists('caminhoes', 'km_ultima_manutencao', 'DECIMAL(10,2)');
            await addColumnIfNotExists('caminhoes', 'intervalo_manutencao_km', 'DECIMAL(10,2) DEFAULT 10000');
            
            // Criar tabela de hist√≥rico de manuten√ß√µes
            await pool.query(`
                CREATE TABLE IF NOT EXISTS manutencoes (
                    id VARCHAR(50) PRIMARY KEY,
                    caminhao_id VARCHAR(50) REFERENCES caminhoes(id) ON DELETE CASCADE,
                    data_manutencao DATE NOT NULL,
                    tipo VARCHAR(50) NOT NULL,
                    descricao TEXT,
                    km_realizacao DECIMAL(10,2),
                    valor DECIMAL(10,2),
                    oficina VARCHAR(100),
                    observacoes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            `);
            
            // Criar √≠ndice para a nova tabela
            await pool.query(`
                CREATE INDEX IF NOT EXISTS idx_manutencoes_caminhao_id ON manutencoes(caminhao_id);
            `);
            
            await pool.query(`
                CREATE INDEX IF NOT EXISTS idx_manutencoes_data ON manutencoes(data_manutencao);
            `);
        }
    },
    {
        version: '1.3.0',
        description: 'Adi√ß√£o de campos para controle de documenta√ß√£o',
        up: async () => {
            console.log('üîÑ Aplicando migra√ß√£o 1.3.0 - Campos de documenta√ß√£o...');
            
            // Adicionar campos de documenta√ß√£o aos caminh√µes
            await addColumnIfNotExists('caminhoes', 'numero_chassi', 'VARCHAR(50) UNIQUE');
            await addColumnIfNotExists('caminhoes', 'numero_renavam', 'VARCHAR(20) UNIQUE');
            await addColumnIfNotExists('caminhoes', 'vencimento_licenciamento', 'DATE');
            await addColumnIfNotExists('caminhoes', 'vencimento_seguro', 'DATE');
            await addColumnIfNotExists('caminhoes', 'numero_apolice_seguro', 'VARCHAR(50)');
            
            // Criar tabela de documentos
            await pool.query(`
                CREATE TABLE IF NOT EXISTS documentos (
                    id VARCHAR(50) PRIMARY KEY,
                    caminhao_id VARCHAR(50) REFERENCES caminhoes(id) ON DELETE CASCADE,
                    tipo_documento VARCHAR(50) NOT NULL,
                    numero_documento VARCHAR(100),
                    data_emissao DATE,
                    data_vencimento DATE,
                    orgao_emissor VARCHAR(100),
                    observacoes TEXT,
                    arquivo_path VARCHAR(500),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            `);
            
            // Criar √≠ndices para a nova tabela
            await pool.query(`
                CREATE INDEX IF NOT EXISTS idx_documentos_caminhao_id ON documentos(caminhao_id);
            `);
            
            await pool.query(`
                CREATE INDEX IF NOT EXISTS idx_documentos_vencimento ON documentos(data_vencimento);
            `);
        }
    }
];

// Fun√ß√£o para aplicar todas as migra√ß√µes pendentes
async function runMigrations() {
    try {
        console.log('üîÑ Verificando migra√ß√µes pendentes...');
        
        for (const migration of migrations) {
            if (!(await migrationApplied(migration.version))) {
                console.log(`üîÑ Aplicando migra√ß√£o ${migration.version} - ${migration.description}...`);
                
                // Executar a migra√ß√£o
                await migration.up();
                
                // Registrar que a migra√ß√£o foi aplicada
                await registerMigration(migration.version, migration.description);
                
                console.log(`‚úÖ Migra√ß√£o ${migration.version} aplicada com sucesso!`);
            } else {
                console.log(`‚è≠Ô∏è  Migra√ß√£o ${migration.version} j√° aplicada`);
            }
        }
        
        console.log('‚úÖ Todas as migra√ß√µes foram verificadas!');
    } catch (error) {
        console.error('‚ùå Erro ao executar migra√ß√µes:', error.message);
        throw error;
    }
}

// Fun√ß√£o para verificar o status das migra√ß√µes
async function migrationStatus() {
    try {
        console.log('\nüìä Status das Migra√ß√µes:');
        console.log('========================');
        
        for (const migration of migrations) {
            const applied = await migrationApplied(migration.version);
            const status = applied ? '‚úÖ APLICADA' : '‚è≥ PENDENTE';
            console.log(`${migration.version} - ${migration.description}: ${status}`);
        }
        
        console.log('========================\n');
    } catch (error) {
        console.error('‚ùå Erro ao verificar status das migra√ß√µes:', error.message);
    }
}

// Fun√ß√£o para reverter migra√ß√£o (rollback) - para casos especiais
async function rollbackMigration(version) {
    try {
        console.log(`üîÑ Revertendo migra√ß√£o ${version}...`);
        
        // Remover o registro da migra√ß√£o
        await pool.query('DELETE FROM schema_migrations WHERE version = $1', [version]);
        
        console.log(`‚úÖ Migra√ß√£o ${version} revertida (registro removido)`);
        console.log('‚ö†Ô∏è  ATEN√á√ÉO: O rollback apenas remove o registro. As mudan√ßas no schema devem ser revertidas manualmente se necess√°rio.');
    } catch (error) {
        console.error(`‚ùå Erro ao reverter migra√ß√£o ${version}:`, error.message);
        throw error;
    }
}

module.exports = {
    migrations,
    runMigrations,
    migrationStatus,
    rollbackMigration
};
